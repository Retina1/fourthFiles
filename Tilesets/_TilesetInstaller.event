#include "Defs/TileConfigs.event"
#include "Defs/ObjPalettes.event"
#include "Defs/TileAnims.event"
#include "Defs/MapIDs.event"
// split plist
PUSH
ORG 0x19900
POIN TileConfigPLIST

ORG 0x19968
POIN ObjTypePalettePLIST

ORG 0x1999C
POIN ObjTypePalettePLIST

ORG 0x30134
POIN TileAnimPLIST

ORG 0x30C78
POIN TileAnimPLIST

//we don't actually need to split the map plist i think
/*ORG 0x34680
POIN MapPLIST

ORG 0x346AC
POIN MapChangesPLIST

ORG 0xB3018
POIN MapChangesPLIST

ORG 0xC66E8
POIN MapChangesPLIST*/

POP

ALIGN 4
TileConfigPLIST:
ORG TileConfigPLIST + (0xFF * 4)

ObjTypePalettePLIST:
ORG ObjTypePalettePLIST + (0xFF * 4)

TileAnimPLIST:
ORG TileAnimPLIST + (0xFF * 4)

MapPLIST:
ORG MapPLIST + (0xFF * 4)

MapChangesPLIST:
ORG MapChangesPLIST + (0xFF * 4)

#define TileConfigPointerTable(aId, apointer) "PUSH; ORG TileConfigPLIST+(0x4 * aId); POIN apointer; POP"
#define ObjTypePalettePointerTable(aId, apointer) "PUSH; ORG ObjTypePalettePLIST+(0x4 * aId); POIN apointer; POP"
#define TileAnimPointerTable(aId, apointer) "PUSH; ORG TileAnimPLIST+(0x4 * aId); POIN apointer; POP"
#define Map_Pointer_Table(aId, apointer) "PUSH; ORG MapPLIST+(4*aId); POIN apointer; POP"
#define MapChangesPointerTable(aId, apointer) "PUSH; ORG MapChangesPLIST+(0x4 * aId); POIN apointer; POP"
#define EventsIDEntry(ChapterID) "PUSH; ORG NewChapterDataTable +(148 * ChapterID)+ 116 ; BYTE ChapterID+1; POP" // 116 is the offset of the EventsID byte, while each row has 148 bytes of data  
// if you really want to have it not just be identical to your chapter ID+1, then use this below I guess 
#define EventsIDEntry(ChapterID, EventID) "PUSH; ORG NewChapterDataTable +(148 * ChapterID)+ 116 ; BYTE EventID; POP" // 116 is the offset of the EventsID byte, while each row has 148 bytes of data  


ALIGN 4
VillageObjects:
#incbin "Village1.dmp"
ALIGN 4
Village1Palette:
#incbin "Village1_pal.dmp"
ALIGN 4
Village1Tiles:
#incext compress "Village.mapchip_config"
TileConfigPointerTable(VillageCONFIG, Village1Tiles)
ObjTypePalettePointerTable(Village1OBJ, VillageObjects)
ObjTypePalettePointerTable(Village1PAL, Village1Palette)